{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","getUser","userId","usersFromServer","find","initialTodos","todosFromServer","getMaxId","Math","max","App","useState","setTodos","setTitle","titleError","setTitleErros","setUserId","selectFieldError","setSelectFieldError","validRegex","inputValidation","text","trim","match","inputTrim","action","method","onSubmit","event","NewTodo","preventDefault","currentTodos","htmlFor","value","placeholder","type","onChange","newTitle","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5091af0f.chunk.js","sourcesContent":["import { User } from '../../types/users';\n\ntype Props = {\n  user: User\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/todos';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user ? <UserInfo user={todo.user} /> : null}\n    </article>\n  );\n};\n","import { Todo } from '../../types/todos';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      <ul>\n        {todos.map(todo => (\n          <li><TodoInfo key={todo.id} todo={todo} /></li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users.json';\nimport todosFromServer from './api/todos.json';\nimport { Todo } from './types/todos';\nimport { TodoList } from './components/TodoList';\n\nconst getUser = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst getMaxId = (todos: Todo[]) => {\n  const maxId = Math.max(\n    ...todos.map(todo => todo.id),\n  );\n\n  return maxId + 1;\n};\n\nexport const App = () => {\n  const [todos, setTodos] = useState(initialTodos);\n\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleErros] = useState(false);\n\n  const [userId, setUserId] = useState(0);\n  const [selectFieldError, setSelectFieldError] = useState(false);\n\n  const validRegex = /^[A-Za-z\\u0400-\\u04FF0-9\\s]+$/;\n\n  const inputValidation = (text: string) => {\n    return text.trim().match(validRegex);\n  };\n\n  const inputTrim = title.trim();\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = event.target.value;\n\n    setTitle(newTitle);\n\n    setTitleErros(!newTitle);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setSelectFieldError(false);\n  };\n\n  const addTodo = (NewTodo: Todo) => {\n    setTodos(currentTodos => [...currentTodos, NewTodo]);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setUserId(0);\n    setTitleErros(false);\n    setSelectFieldError(false);\n  };\n\n  function handleSumbit(event: React.FormEvent) {\n    event.preventDefault();\n\n    setTitleErros(!inputValidation(title));\n    setSelectFieldError(!userId);\n\n    if (!inputValidation(title) || !userId) {\n      return;\n    }\n\n    addTodo({\n      id: getMaxId(todos),\n      title,\n      userId,\n      completed: false,\n      user: getUser(userId),\n    });\n\n    reset();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSumbit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title-id\">\n            Title:&nbsp;\n          </label>\n\n          <input\n            value={title}\n            id=\"title-id\"\n            placeholder=\"Enter a title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            onChange={handleTitleInput}\n          />\n\n          {titleError && (\n            <span className=\"error\">\n              {!inputTrim\n                ? 'Please enter a title'\n                : 'Please enter a correct title'}\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"select-id\">\n            User:&nbsp;\n          </label>\n\n          <select\n            value={userId}\n            data-cy=\"userSelect\"\n            id=\"select-id\"\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {selectFieldError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}